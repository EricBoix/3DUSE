#ifndef __LAYERASSIMP_HPP__
#define __LAYERASSIMP_HPP__
////////////////////////////////////////////////////////////////////////////////
#include "abstractlayer.hpp"

#include "URI.hpp"
#include <string>
#include <memory>
////////////////////////////////////////////////////////////////////////////////
namespace vcity
{
////////////////////////////////////////////////////////////////////////////////
/// \brief LayerAssimp class : it holds all the assimp objects
class LayerAssimp : public abstractLayer
{
public:
    /// \brief Layer Build empty layer
    /// \param name Layer name
    LayerAssimp(const std::string& name);

    virtual ~LayerAssimp()override;

    const std::string getType() const;

	URI getURI() const;

    void dump();

private:
};
////////////////////////////////////////////////////////////////////////////////
typedef std::shared_ptr<LayerAssimp> LayerAssimpPtr;
////////////////////////////////////////////////////////////////////////////////
} // namespace vcity
////////////////////////////////////////////////////////////////////////////////
#endif // __LAYERASSIMP_HPP__
