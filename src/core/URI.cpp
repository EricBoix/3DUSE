////////////////////////////////////////////////////////////////////////////////
#include "URI.hpp"
////////////////////////////////////////////////////////////////////////////////
namespace vcity
{
////////////////////////////////////////////////////////////////////////////////
URI::URI()
    : m_depth(0), m_type(), m_uri()
{

}
////////////////////////////////////////////////////////////////////////////////
void URI::append(const std::string& node)
{
    m_uri.push_back(node);
    ++m_depth;
}
////////////////////////////////////////////////////////////////////////////////
void URI::setType(const std::string& type)
{
    m_type = type;
}
////////////////////////////////////////////////////////////////////////////////
int URI::getDepth() const
{
    return m_depth;
}
////////////////////////////////////////////////////////////////////////////////
const std::string& URI::getNode(int depth) const
{
    return m_uri[depth];
}
////////////////////////////////////////////////////////////////////////////////
const std::string& URI::getType() const
{
    return m_type;
}
////////////////////////////////////////////////////////////////////////////////
std::vector<std::string>& URI::getURI()
{
    return m_uri;
}
////////////////////////////////////////////////////////////////////////////////
const std::vector<std::string>& URI::getURI() const
{
    return m_uri;
}
////////////////////////////////////////////////////////////////////////////////
std::string URI::getStringURI(bool includeType) const
{
    std::string res;
    if(includeType) res = m_type + ':';
    for(std::vector<std::string>::const_reverse_iterator it = m_uri.rbegin(); it < m_uri.rend(); ++it)
    {
        res += *it + '.';
    }
    return res;
}
////////////////////////////////////////////////////////////////////////////////
} // namespace vcity
////////////////////////////////////////////////////////////////////////////////
