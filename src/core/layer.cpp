////////////////////////////////////////////////////////////////////////////////
#include "layer.hpp"
////////////////////////////////////////////////////////////////////////////////
namespace vcity
{
////////////////////////////////////////////////////////////////////////////////
Layer::Layer(const std::string& name)
    : m_name(name)
{

}
////////////////////////////////////////////////////////////////////////////////
void Layer::setName(const std::string& name)
{
    m_name = name;
}
////////////////////////////////////////////////////////////////////////////////
const std::string& Layer::getName() const
{
    return m_name;
}
////////////////////////////////////////////////////////////////////////////////
void Layer::addTile(Tile* tile)
{
    m_tiles.push_back(tile);
}
////////////////////////////////////////////////////////////////////////////////
Tile* Layer::getTile(const URI& uri)
{
    if(uri.getType() == "Tile")
    {
        for(std::vector<Tile*>::iterator it = m_tiles.begin(); it < m_tiles.end(); ++it)
        {
            if(uri.getNode(1) == (*it)->getName())
            {
                return *it;
            }
        }
    }

    return nullptr;
}
////////////////////////////////////////////////////////////////////////////////
std::vector<Tile*>& Layer::getTiles()
{
    return m_tiles;
}
////////////////////////////////////////////////////////////////////////////////
const std::vector<Tile*>& Layer::getTiles() const
{
    return m_tiles;
}
////////////////////////////////////////////////////////////////////////////////
void Layer::deleteTile(const URI& uri)
{

}
////////////////////////////////////////////////////////////////////////////////
citygml::CityObject* Layer::getNode(const URI& uri)
{
    URI uriTile;
    uriTile.append(uri.getNode(1));
    uriTile.setType("Tile");
    Tile* tile = getTile(uriTile);
    if(tile)
    {
        return tile->getNode(uri);
    }

    return nullptr;
}
////////////////////////////////////////////////////////////////////////////////
} // namespace vcity
////////////////////////////////////////////////////////////////////////////////
