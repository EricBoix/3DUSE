////////////////////////////////////////////////////////////////////////////////
#include "application.hpp"
////////////////////////////////////////////////////////////////////////////////
namespace vcity
{
////////////////////////////////////////////////////////////////////////////////
Application* gApp = nullptr;
Log* gLog = nullptr;
////////////////////////////////////////////////////////////////////////////////
Application::Application()
    : m_controller(nullptr)
{
    gApp = this;
    gLog = &m_log;
    m_dataprofile = createDefaultDataProfile();
}
////////////////////////////////////////////////////////////////////////////////
Application::~Application()
{
    delete m_controller;
}
////////////////////////////////////////////////////////////////////////////////
Scene& Application::getScene()
{
    return m_scene;
}
////////////////////////////////////////////////////////////////////////////////
const Scene& Application::getScene() const
{
    return m_scene;
}
////////////////////////////////////////////////////////////////////////////////
DataProfile& Application::getDataProfile()
{
    return m_dataprofile;
}
////////////////////////////////////////////////////////////////////////////////
const DataProfile& Application::getDataProfile() const
{
    return m_dataprofile;
}
////////////////////////////////////////////////////////////////////////////////
Settings& Application::getSettings()
{
    return m_settings;
}
////////////////////////////////////////////////////////////////////////////////
const Settings& Application::getSettings() const
{
    return m_settings;
}
////////////////////////////////////////////////////////////////////////////////
Controller* Application::getController()
{
    return m_controller;
}
////////////////////////////////////////////////////////////////////////////////
void Application::setController(Controller* cont)
{
    m_controller = cont;
}
////////////////////////////////////////////////////////////////////////////////
Algo& Application::getAlgo()
{
    return m_algo;
}
////////////////////////////////////////////////////////////////////////////////
Algo2& Application::getAlgo2()
{
    return m_algo2;
}
////////////////////////////////////////////////////////////////////////////////
const std::vector<URI>& Application::getSelectedNodes() const
{
    return m_selectedNodes;
}
////////////////////////////////////////////////////////////////////////////////
void Application::setSelectedNodes(const std::vector<URI>& uris)
{
    resetSelectedNodes();
    for(std::vector<URI>::const_iterator it = uris.begin(); it < uris.end(); ++it)
    {
        addSelectedNode(*it);
    }
}
////////////////////////////////////////////////////////////////////////////////
bool Application::addSelectedNode(const URI& uri)
{
    // check that node is not already selected
    if(std::find(m_selectedNodes.begin(), m_selectedNodes.end(), uri) == m_selectedNodes.end())
    {
        m_selectedNodes.push_back(uri);
        return true;
    }

    return false;
}
////////////////////////////////////////////////////////////////////////////////
void Application::resetSelectedNodes()
{
    m_selectedNodes.clear();
}
////////////////////////////////////////////////////////////////////////////////
Application& app()
{
    return *gApp;
}
////////////////////////////////////////////////////////////////////////////////
Log& log()
{
    return *gLog;
}
////////////////////////////////////////////////////////////////////////////////
} // namespace vcity
////////////////////////////////////////////////////////////////////////////////
